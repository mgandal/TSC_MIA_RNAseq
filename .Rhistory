plotGene("Arc", datExpr.voom$E, datMeta, tt)
plotGene("Nr4a1", datExpr.voom$E, datMeta, tt)
plotGene("Xlr3b", datExpr.voom$E, datMeta, tt)
plotGene("Dusp1", datExpr.voom$E, datMeta, tt)
plotGene("Crybb1", datExpr.voom$E, datMeta, tt)
plotGene("Prss41", datExpr.voom$E, datMeta, tt)
plotGene("Gm15487", datExpr.voom$E, datMeta, tt)
plotGene("Fcrls", datExpr.voom$E, datMeta, tt)
plotGene("Banp", datExpr.voom$E, datMeta, tt)
plotGene("Sgk1", datExpr.voom$E, datMeta, tt)
#Calculate gene ontology for each region
plotGO = function(tt) {
go_results = data.frame()
tt$logFC=-1*tt$logFC
query.up = rownames(tt)[tt$adj.P.Val<.1 & tt$logFC>0]
query.up = query.up[order(tt[query.up, "logFC"], decreasing = T)]
query.down = rownames(tt)[tt$adj.P.Val<.1 & tt$logFC<0]
query.down = query.down[order(tt[query.down, "logFC"], decreasing = F)]
go.up = gprofiler(query.up, organism = "mmusculus", custom_bg = rownames(tt),
src_filter=c("KEGG", "GO"), correction_method = "fdr", ordered_query = F,
significant = T, exclude_iea = F,  region_query = F, max_p_value = 0.05,
numeric_ns = "", max_set_size = 1000,hier_filtering = "strong")
go.up = go.up[order(go.up$p.value)[1:min(10,nrow(go.up))],]
go.down = gprofiler(query.down,  organism = "mmusculus", custom_bg = rownames(tt),
src_filter=c("KEGG", "GO"), correction_method = "fdr", ordered_query = F,
significant = T, exclude_iea = F,  region_query = F, max_p_value = 0.05,
numeric_ns = "", max_set_size = 1000,hier_filtering = "strong")
go.down = go.down[order(go.down$p.value)[1:min(10,nrow(go.down))],]
go_results = data.frame()
go_results = rbind(go_results, data.frame(Change="Up", go.up))
go_results = rbind(go_results, data.frame( Change="Down", go.down))
go_results = go_results[order(-log10(go_results$p.value),decreasing = F),]
plot.down = ggplot(go_results[go_results$Change=="Down",],aes(x=reorder(term.name, -log10(p.value)), y=-log10(p.value))) + geom_bar(stat="identity") + coord_flip() +
xlab("") + geom_abline(slope = 0, intercept = -log10(.05), lty=2, lwd=.5) + theme(axis.text.y = element_text(size=8))
plot.up = ggplot(go_results[go_results$Change=="Up",],aes(x=reorder(term.name, -log10(p.value)), y=-log10(p.value))) + geom_bar(stat="identity", aes(x=reorder(term.name, -log10(p.value)))) + coord_flip() +
xlab("") + geom_abline(slope = 0, intercept = -log10(.05), lty=2, lwd=.5)+ theme(axis.text.y = element_text(size=8))
grid.arrange(grobs=list(plot.down, plot.up), ncol=2)
}
plotGO(tt)
gprofiler(rownames(tt)[tt$adj.P.Val<0.1], custom_bg = rownames(tt), organism="mmusculus")
ggprofiler(rownames(tt)[tt$adj.P.Val<0.1], custom_bg = rownames(tt), organism="mmusculus")
go=gprofiler(rownames(tt)[tt$adj.P.Val<0.1], custom_bg = rownames(tt), organism="mmusculus")
View(go)
#Calculate gene ontology for each region
plotGO = function(tt) {
go_results = data.frame()
tt$logFC=-1*tt$logFC
query.up = rownames(tt)[tt$adj.P.Val<.1 & tt$logFC>0]
query.up = query.up[order(tt[query.up, "logFC"], decreasing = T)]
query.down = rownames(tt)[tt$adj.P.Val<.1 & tt$logFC<0]
query.down = query.down[order(tt[query.down, "logFC"], decreasing = F)]
go.up = gprofiler(query.up, organism = "mmusculus", custom_bg = rownames(tt),
src_filter=c("KEGG", "GO"), correction_method = "fdr", ordered_query = F,
significant = T, exclude_iea = F,  region_query = F, max_p_value = 0.05,
numeric_ns = "", max_set_size = 1000,hier_filtering = "strong")
go.up = go.up[order(go.up$p.value)[1:min(10,nrow(go.up))],]
go.down = gprofiler(query.down,  organism = "mmusculus", custom_bg = rownames(tt),
src_filter=c("KEGG", "GO"), correction_method = "fdr", ordered_query = F,
significant = T, exclude_iea = F,  region_query = F, max_p_value = 0.05,
numeric_ns = "", max_set_size = 1000,hier_filtering = "strong")
go.down = go.down[order(go.down$p.value)[1:min(10,nrow(go.down))],]
go_results = data.frame()
go_results = rbind(go_results, data.frame(Change="Up", go.up))
go_results = rbind(go_results, data.frame( Change="Down", go.down))
go_results = go_results[order(-log10(go_results$p.value),decreasing = F),]
plot.down = ggplot(go_results[go_results$Change=="Down",],aes(x=reorder(term.name, -log10(p.value)), y=-log10(p.value))) + geom_bar(stat="identity") + coord_flip() +
xlab("") + geom_abline(slope = 0, intercept = -log10(.05), lty=2, lwd=.5) + theme(axis.text.y = element_text(size=8)) + ggtitle("Downregulated")
plot.up = ggplot(go_results[go_results$Change=="Up",],aes(x=reorder(term.name, -log10(p.value)), y=-log10(p.value))) + geom_bar(stat="identity", aes(x=reorder(term.name, -log10(p.value)))) + coord_flip() +
xlab("") + geom_abline(slope = 0, intercept = -log10(.05), lty=2, lwd=.5)+ theme(axis.text.y = element_text(size=8)) + ggtitle("Upregulated")
grid.arrange(grobs=list(plot.down, plot.up), ncol=2)
}
plotGO(tt)
plotGene("Cx3cr1", datExpr.voom$E, datMeta, tt)
plotGene("Csf1r", datExpr.voom$E, datMeta, tt)
plotGene("Bcl6", datExpr.voom$E, datMeta, tt)
plotGO(tt.noWT)
plotGene("Adora2a", datExpr.voom.noWT$E, datMeta.noWT, tt.noWT)
library(pathview)
source("http://bioconductor.org/biocLite.R")
biocLite("pathview")
library(pathview)
?pathview
pv.out =pathview(species = "mmusculus", pathway.id="04151")
pv.out =pathview(gene.data = datProbes$external_gene_name[tt.noWT$adj.P.Val<0.1],species = "mmusculus", pathway.id="04151")
pv.out =pathview(gene.data = datProbes$external_gene_name[tt.noWT$adj.P.Val<0.1],species = "mouse", pathway.id="04151")
datProbes$external_gene_name[tt.noWT$adj.P.Val<0.1]
pv.out =pathview(gene.data = toupper(datProbes$external_gene_name[tt.noWT$adj.P.Val<0.1]),species = "mouse", pathway.id="04151")
data(gene.idtype.list)
gene.idtype.list
pv.out =pathview(gene.data = toupper(datProbes$ensembl_gene_id[tt.noWT$adj.P.Val<0.1]),species = "mouse", pathway.id="04151")
pv.out =pathview(gene.data = toupper(datProbes$ensembl_gene_id[tt.noWT$adj.P.Val<0.1]),species = "mouse", pathway.id="04151", gene.idtype="ENSEMBL")
head(tt.noWT)
pv.out =pathview(gene.data = toupper(tt.noWT[,"logFC"],species = "mouse", pathway.id="04151", gene.idtype="ENSEMBL")
pv.out =pathview(gene.data = tt.noWT[,"logFC"],species = "mouse", pathway.id="04151", gene.idtype="ENSEMBL")
pv.out =pathview(gene.data = tt.noWT[,"logFC"],species = "mouse", pathway.id="04151", gene.idtype="ENSEMBL")
pv.out =pathview(gene.data = tt.noWT[,2],species = "mouse", pathway.id="04151", gene.idtype="ENSEMBL")
pv.out =pathview(gene.data = tt.noWT[,2],species = "mouse", pathway.id="04151")
dat = matrix(tt.noWT)
rownames(dat) = toupper(datProbes$external_gene_name)
toupper(datProbes$external_gene_name)
View(dat)
dat = (tt.noWT)
View(dat)
View(dat)
rownames(dat) = dat$ID
genes = unique(dat$ID)
dat = dat[match(genes,dat$ID),]
rownames(dat) = toupper(dat$ID
rownames(dat) = toupper(dat$ID)
rownames(dat) = toupper(dat$ID)
View(dat)
pv.out =pathview(gene.data = dat[,2],species = "mouse", pathway.id="04151")
pv.out =pathview(gene.data = dat[,2],species = "mouse", pathway.id="04151", gene.idtype = "SYMBOL")
pv.out =pathview(gene.data = dat[,2],species = "mouse", pathway.id="04151", gene.idtype = "GENENAME")
data(gse16873.d)
pv.out <- pathview(gene.data = gse16873.d[, 1], pathway.id = "04110",
+ species = "hsa", out.suffix = "gse16873")
pv.out <- pathview(gene.data = gse16873.d[, 1], pathway.id = "04110", species = "hsa", out.suffix = "gse16873")
View(gse16873.d)
View(gse16873.d)
View(dat)
rownames(dat) = (dat$ID)
pv.out =pathview(gene.data = dat[,2],species = "mouse", pathway.id="04151", gene.idtype = "GENENAME")
pv.out =pathview(gene.data = dat[,2],species = "mouse", pathway.id="04151", gene.idtype = "SYMBOL")
pv.out =pathview(gene.data = dat[,2],species = "mouse", pathway.id="04151", gene.idtype = "GENESYMBOL")
pv.out =pathview(gene.data = dat[,2],species = "mouse", pathway.id="04151")
View(gene.idtype.bods)
dat = as.matrix(tt.noWT)
View(dat)
pv.out =pathview(gene.data = dat[,2],species = "mouse", pathway.id="04151")
pv.out =pathview(gene.data = dat[,2],species = "mouse", pathway.id="04151", gene.idtype="ENSEMBL")
dat[,2]
dat = matrix(Log2FC = as.numeric(tt.noWT$logFC))
View(dat)
dat = matrix(data.frame(Log2FC = as.numeric(tt.noWT$logFC)))
View(dat)
dat = as.matrix(data.frame(Log2FC = as.numeric(tt.noWT$logFC)))
View(dat)
rownames(dat)
rownames(dat) = rownames(tt.noWT)
pv.out =pathview(gene.data = dat[,1],species = "mouse", pathway.id="04151", gene.idtype="ENSEMBL")
dat = as.matrix(data.frame(Log2FC = as.numeric(ttT$logFC)))
dat = as.matrix(data.frame(Log2FC = as.numeric(tt$logFC)))
rownames(dat) = rownames(tt.noWT)
pv.out =pathview(gene.data = dat[,1],species = "mouse", pathway.id="04151", gene.idtype="ENSEMBL")
dat = as.matrix(data.frame(Log2FC = as.numeric(tt$logFC), logP = -log10(tt$P.Value)))
rownames(dat) = rownames(tt.noWT)
pv.out =pathview(gene.data = dat[,c(1,2)],species = "mouse", pathway.id="04151", gene.idtype="ENSEMBL")
head(dat)
min(dat$logP)
dat[,2]
min(dat[,2])
max(dat[,2])
pv.out =pathview(gene.data = dat[,c(1,2)],species = "mouse", pathway.id="04151", gene.idtype="ENSEMBL",multi.state=T)
pv.out =pathview(gene.data = dat[,c(1,2)],species = "mouse", pathway.id="04151", gene.idtype="ENSEMBL",multi.state=T,match.data=F)
pv.out =pathview(gene.data = dat[,c(1,2)],species = "mouse", pathway.id="04151", gene.idtype="ENSEMBL",multi.state=T,match.data=F,same.layer=T)
pv.out =pathview(gene.data = dat[,c(1,2)],species = "mouse", pathway.id="04151", gene.idtype="ENSEMBL",same.layer=T)
pv.out =pathview(gene.data = dat[,c(1,2)],species = "mouse", pathway.id="04151", gene.idtype="ENSEMBL",multi.state=T,match.data=F)
pv.out =pathview(gene.data = dat[,c(1)], cpd.data = dat[,2],species = "mouse", pathway.id="04151", gene.idtype="ENSEMBL",multi.state=T,match.data=F)
pv.out =pathview(gene.data = dat[,c(1)], cpd.data = dat[,2],species = "mouse", pathway.id="04151", gene.idtype="ENSEMBL")
pv.out =pathview(gene.data = dat[,c(1)], cpd.data = dat[,2],species = "mouse", pathway.id="04151", gene.idtype="ENSEMBL",same.layer=T)
pv.out =pathview(gene.data = dat[,c(1)], cpd.data = dat[,2],species = "mouse", pathway.id="04151", gene.idtype="ENSEMBL",cpd.idtype="ENSEMBL",same.layer=T)
pv.out =pathview(gene.data = dat[,c(1)], cpd.data = dat[,2],species = "mouse", pathway.id="04151", gene.idtype="ENSEMBL",cpd.idtype="ENSEMBL",same.layer=T)
pv.out =pathview(gene.data = dat[,c(1,2)], cpd.data = dat[,2],species = "mouse", pathway.id="04151", gene.idtype="ENSEMBL",same.layer=T)
pv.out =pathview(gene.data = dat[,c(1)], species = "mouse", pathway.id="04151", gene.idtype="ENSEMBL",same.layer=T)
pv.out =pathview(gene.data = dat[,c(1)], species = "mouse", pathway.id="04150", gene.idtype="ENSEMBL",same.layer=T,out.suffix="mTOR")
pv.out =pathview(gene.data = dat[,c(1)], species = "mouse", pathway.id="04151", gene.idtype="ENSEMBL",same.layer=T,out.suffix="PI3K-AKT")
pv.out =pathview(gene.data = dat[,c(1)], species = "mouse", pathway.id="04064", gene.idtype="ENSEMBL",same.layer=T,out.suffix="NFKB")
pv.out =pathview(gene.data = dat[,c(1)], species = "mouse", pathway.id="04062", gene.idtype="ENSEMBL",same.layer=T,out.suffix="Chemokine")
pv.out =pathview(gene.data = dat[,c(1)], species = "mouse", pathway.id="04668", gene.idtype="ENSEMBL",same.layer=T,out.suffix="TNF")
pv.out =pathview(gene.data = dat[,c(1)], species = "mouse", pathway.id="04722", gene.idtype="ENSEMBL",same.layer=T,out.suffix="Neurotrophin")
#Calculate gene ontology for each region
plotGO = function(tt) {
go_results = data.frame()
tt$logFC=-1*tt$logFC
query.up = rownames(tt)[tt$adj.P.Val<.1 & tt$logFC>0]
query.up = query.up[order(tt[query.up, "logFC"], decreasing = T)]
query.down = rownames(tt)[tt$adj.P.Val<.1 & tt$logFC<0]
query.down = query.down[order(tt[query.down, "logFC"], decreasing = F)]
go.up = gprofiler(query.up, organism = "mmusculus", custom_bg = rownames(tt),
src_filter=c("KEGG"), correction_method = "fdr", ordered_query = F,
significant = T, exclude_iea = F,  region_query = F, max_p_value = 0.05,
numeric_ns = "", max_set_size = 1000,hier_filtering = "strong")
go.up = go.up[order(go.up$p.value)[1:min(10,nrow(go.up))],]
go.down = gprofiler(query.down,  organism = "mmusculus", custom_bg = rownames(tt),
src_filter=c("KEGG"), correction_method = "fdr", ordered_query = F,
significant = T, exclude_iea = F,  region_query = F, max_p_value = 0.05,
numeric_ns = "", max_set_size = 1000,hier_filtering = "strong")
go.down = go.down[order(go.down$p.value)[1:min(10,nrow(go.down))],]
go_results = data.frame()
go_results = rbind(go_results, data.frame(Change="Up", go.up))
go_results = rbind(go_results, data.frame( Change="Down", go.down))
go_results = go_results[order(-log10(go_results$p.value),decreasing = F),]
plot.down = ggplot(go_results[go_results$Change=="Down",],aes(x=reorder(term.name, -log10(p.value)), y=-log10(p.value))) + geom_bar(stat="identity") + coord_flip() +
xlab("") + geom_abline(slope = 0, intercept = -log10(.05), lty=2, lwd=.5) + theme(axis.text.y = element_text(size=8)) + ggtitle("Downregulated")
plot.up = ggplot(go_results[go_results$Change=="Up",],aes(x=reorder(term.name, -log10(p.value)), y=-log10(p.value))) + geom_bar(stat="identity", aes(x=reorder(term.name, -log10(p.value)))) + coord_flip() +
xlab("") + geom_abline(slope = 0, intercept = -log10(.05), lty=2, lwd=.5)+ theme(axis.text.y = element_text(size=8)) + ggtitle("Upregulated")
grid.arrange(grobs=list(plot.down, plot.up), ncol=2)
}
plotGO(tt.noWT)
plotGO(tt)
options(stringsAsFactors = F)
rm(list=ls()) #Clear workspace
setwd("~/Github//TSC_MIA_RNAseq/")
to_plot = F
#Load Libraries
library(WGCNA); library(DESeq2); library(biomaRt); library(ggplot2);
library(reshape); library(edgeR);
library(limma);  library(gridExtra);
library(gProfileR); library(fdrtool); library(corrplot); library(venneuler); library(pSI)
library(ggrepel)
load("./data/htsForDGE.Rdata")
batch1 = vector(mode="list")
batch1$datExpr = datExpr.hts
batch1$datMeta = datMeta
rm(datExpr.hts, datMeta)
load("./data/batch2/batch2_fc.Rdata")
batch2 = vector(mode="list")
batch2$datExpr = datExpr
batch2$datMeta =datMeta
rm(datExpr, datMeta)
genes = intersect(rownames(batch1$datExpr), rownames(batch2$datExpr))
genes = intersect(genes, datProbes$ensembl_gene_id)
datExpr = cbind(batch1$datExpr[match(genes,rownames(batch1$datExpr)),],
batch2$datExpr[match(genes,rownames(batch2$datExpr)),])
datMeta = data.frame(Sample = batch1$datMeta$Sample, Group = batch1$datMeta$Treatment, Region = batch1$datMeta$Region, Batch="Batch1", Subject = batch1$datMeta$Subject, Hemisphere=batch1$datMeta$Hemisphere,
Genotype=batch1$datMeta$Genotype, Treatment = batch1$datMeta$Treatment, RIN=batch1$datMeta$RIN, seqPC1=batch1$datMeta$seqPC1, seqPC2 = batch1$datMeta$seqPC2)
batch2$datMeta$Region = gsub("CB", "CBL",batch2$datMeta$Region)
batch2$datMeta$Region = gsub("HP", "HC",batch2$datMeta$Region)
batch2$datMeta$Treatment = gsub("A", "PolyIC + Plx", batch2$datMeta$Treatment)
batch2$datMeta$Treatment = gsub("B", "PolyIC + Sal", batch2$datMeta$Treatment)
batch2$datMeta$Group = gsub("PolyIC [+] Sal", "PolyIC", batch2$datMeta$Treatment)
datMeta = rbind(datMeta,
data.frame(Sample = batch2$datMeta$Sample, Group= batch2$datMeta$Group,Region = batch2$datMeta$Region, Batch="Batch2", Subject = batch2$datMeta$Mouse, Hemisphere=batch2$datMeta$Hemisphere,
Genotype="Het", Treatment = batch2$datMeta$Treatment, RIN=batch2$datMeta$RIN, seqPC1=batch2$datMeta$seqPC1, seqPC2 = batch2$datMeta$seqPC2))
all(datMeta$Sample == colnames(datExpr))
datProbes = datProbes[match(rownames(datExpr),datProbes$ensembl_gene_id),]
design <- model.matrix(~ Genotype + Treatment + Region + Hemisphere + RIN + seqPC1 + seqPC2, data = datMeta)
#Filter Genes: 10+ counts in half samples
genes_to_keep = apply(datExpr>=10,1,sum) >= round(0.5 * ncol(datExpr)) & !apply(is.na(datExpr),1,any)
table(genes_to_keep)
datExpr = datExpr[genes_to_keep,]
datProbes = datProbes[genes_to_keep,]
#QC, Normalization
v <- voom(calcNormFactors(DGEList(datExpr)), design,plot = F)$E
par(mfrow=c(2,1))
mds = cmdscale(dist(t(v)), eig = T);   pc1 = mds$eig[1]^2 / sum(mds$eig^2);   pc2 = mds$eig[2]^2 / sum(mds$eig^2)
plot(mds$points, col=as.factor(datMeta$Region), pch=16,main="MDS Plot by Region", asp=1, xlab = paste("PC1 (", signif(100*pc1,3), "%)", sep=""), ylab = paste("PC1 (", signif(100*pc2,3),"%)",sep=""))
legend("topleft",legend = levels(as.factor(datMeta$Region)), col=1:3,pch=19)
plot(mds$points, col=as.factor(datMeta$Batch), pch=16,main="MDS Plot by Batch", asp=1, xlab = paste("PC1 (", signif(100*pc1,3), "%)", sep=""), ylab = paste("PC1 (", signif(100*pc2,3),"%)",sep=""))
legend("topleft",legend = levels(as.factor(datMeta$Batch)), col=1:3,pch=19)
plot(mds$points, col=as.factor(datMeta$Genotype), pch=16,main="MDS Plot by Genotype", asp=1, xlab = paste("PC1 (", signif(100*pc1,3), "%)", sep=""), ylab = paste("PC1 (", signif(100*pc2,3),"%)",sep=""))
legend("topleft",legend = levels(as.factor(datMeta$Genotype)), col=1:3,pch=19)
i = 1; plot(density((v[,i])), col = as.numeric(datMeta$Region[i]), main="Expression Histogram", xlab = "log2 Normalized Counts");
for(i in 2:dim(v)[2]) {    lines(density(((v[,i]+1)), na.rm=T), col = as.numeric(datMeta$Region[i]),) }
tree = hclust(dist(t(v)),"average")
rin_col = numbers2colors(datMeta$RIN,lim = c(0,10))
libsize_col = numbers2colors(apply(datExpr,2,sum))
seqPC1_col=numbers2colors(datMeta$seqPC1,signed = T, centered = T)
seqPC2_col=numbers2colors(datMeta$seqPC2, signed = T, centered = T)
plotDendroAndColors(tree, cbind(datMeta$Region, factor(datMeta$Batch), datMeta$Treatment, rin_col, libsize_col,seqPC1_col, seqPC2_col),
c("Region", "Batch", "Treatment","RIN", "LibrarySize","seqPC1", "seqPC2"))
#Outlier Removal from MDS/dendrogram
outliers = (datMeta$Sample=="TSC2.693.CB.R")
datExpr = datExpr[,!outliers]
datMeta = datMeta[!outliers,]
datExpr.ComBat = sva::ComBat(datExpr.voom$E,batch = datMeta$Batch,mod = model.matrix(~datMeta$Genotype + datMeta$Group))
datMeta$Group2 = factor(paste(datMeta$Genotype, datMeta$Group))
datMeta$SocialMemoryIntact = T
datMeta$SocialMemoryIntact[datMeta$Genotype=="Het" & datMeta$Group=="PolyIC"] = F
design <- model.matrix(~ SocialMemoryIntact + Batch + Region + Hemisphere + RIN  + seqPC1 + seqPC2, data = datMeta)
##Global DGE
datExpr.voom = voom(calcNormFactors(DGEList(counts=datExpr)), design, plot=F)
corfit= duplicateCorrelation(datExpr.voom,design,block=datMeta$Subject)
lm = lmFit(datExpr.voom, design,block=datMeta$Mouse, correlation = corfit$consensus)
# cont = makeContrasts(Group2Het...PolyIC...Plx + Group2Het...Saline + Group2WT...PolyIC - Group2Het...PolyIC, levels=design)
# lm = contrasts.fit(lm, cont)
lm = eBayes(lm)
tt = topTable(lm, coef=2, number = Inf,sort.by = "none",genelist = datProbes$external_gene_name)
tt$q = tt$adj.P.Val
# glXYPlot(-tt$logFC, -log10(tt$adj.P.Val), status=as.numeric(tt$adj.P.Val<0.1),
#          counts=datExpr.ComBat, anno=datProbes[,c(1:3)], groups=datMeta$Group2,
#          side.main = "external_gene_name",  xlab = "logFC",ylab = "log10FDR", sample.cols = labels2colors(as.numeric(datMeta$Region)))
#
#Volcano Plot
ggplot(as.data.frame(tt), aes(x=-logFC, y=-log10(adj.P.Val), color = (adj.P.Val< .05), label=ID)) + geom_point(alpha=0.5) +
scale_color_manual(values=c("grey60", "red"))  +
geom_text_repel(dat=as.data.frame(tt[tt$adj.P.Val<.05 & abs(tt$logFC) > .1, ]), aes(label = ID), size=3, color="black", alpha=0.7,
box.padding = unit(0.45, "lines")) + ggtitle("Intact Social Memory DGE", subtitle = "(WT, Het + Sal, Het + PLX) vs Het + PolyIC")
plotGene = function(gene, datExpr, datMeta, tt) {
idx = which(datProbes$external_gene_name==gene)
d= data.frame(count=as.numeric(datExpr[idx,]), Group = datMeta$Group2,Treatment=datMeta$Treatment, Region=datMeta$Region, Hemisphere=datMeta$Hemisphere, Subject=datMeta$Subject, RIN = datMeta$RIN)
tt$q = tt$adj.P.Val
g1 = ggplot(d,aes(x=Group, y=count, fill=Group))  +
geom_boxplot(outlier.shape = NA, aes(fill=Group)) + geom_point(position=position_jitterdodge(0.8), alpha=0.5,size=1) +
xlab("") + ylab("log2 normalized counts") + facet_grid(~Region) +
theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust=.5),
axis.text.x = element_blank(), axis.ticks.x =element_blank(),axis.title.x=element_blank(),
axis.title.y = element_text(size=8), axis.text.y = element_text(size=8),
legend.title = element_text(size=8), legend.text = element_text(size=8),
legend.key.width=unit(0.3,"cm"))+
ggtitle(datProbes$external_gene_name[idx],
subtitle = paste("DGE social memory: log2FC=", signif(-1*tt[idx, "logFC"],2), ", q=", signif(tt[idx, "q"],2),sep=""))
return(list(g1, pairwise.t.test(d$count,d$Region:d$Group,p.adjust.method = "fdr")))
}
pairwise.t.test(d$count[d$Region=="PFC"],d$Group[d$Region=="PFC"],p.adjust.method = "fdr")
pairwise.t.test(d$count[d$Region=="HC"],d$Group[d$Region=="HC"],p.adjust.method = "fdr")
pairwise.t.test(d$count[d$Region=="CBL"],d$Group[d$Region=="CBL"],p.adjust.method = "fdr")
pairwise.t.test(d$count,d$Region:d$Group,p.adjust.method = "fdr")
pairwise.t.test(d$count,d$Group, p.adjust.method = "fdr")
tab = pairwise.t.test(d$count,d$Region:d$Group,p.adjust.method = "fdr")
grid.table(signif(tab$p.value,1),theme= ttheme_default(base_size=8))
datExpr.noWT = datExpr[,datMeta$Genotype=="Het"]
datMeta.noWT = datMeta[datMeta$Genotype=="Het",]
design.noWT <- model.matrix(~ SocialMemoryIntact + Batch + Region + Hemisphere + RIN  + seqPC1 + seqPC2, data = datMeta.noWT)
datExpr.voom.noWT = voom(calcNormFactors(DGEList(counts=datExpr.noWT)), design.noWT, plot=F)
corfit.noWT= duplicateCorrelation(datExpr.voom.noWT,design.noWT,block=datMeta.noWT$Subject)
lm.noWT= lmFit(datExpr.voom.noWT, design.noWT,block=datMeta.noWT$Mouse, correlation = corfit.noWT$consensus)
lm.noWT = eBayes(lm.noWT)
tt.noWT = topTable(lm.noWT, coef=2, number = Inf,sort.by = "none",genelist = datProbes$external_gene_name)
ggplot(as.data.frame(tt.noWT), aes(x=-logFC, y=-log10(adj.P.Val), color = (adj.P.Val< .05), label=ID)) + geom_point(alpha=0.5) +
scale_color_manual(values=c("grey60", "red"))  +
geom_text_repel(dat=as.data.frame(tt.noWT[tt.noWT$adj.P.Val<.05 & abs(tt.noWT$logFC) > .1, ]), aes(label = ID), size=3, color="black", alpha=0.7,
box.padding = unit(0.45, "lines")) + ggtitle("Social Memory DGE", subtitle = "(Het + Sal, Het + PLX) vs Het + PolyIC")
plot(as.numeric(datExpr.voom$E[idx.nfkbia,])~datMeta$SocialMemoryIntact)
plot(tt$logFC, -log10(tt$q), xlab="log2 Fold Change", ylab="-log10(qval)",cex=.7, main="Treatment DGE (across all regions)",ylim=c(0,6))
points(tt$logFC[tt$q<.1], -log10(tt$q[tt$q<.1]),pch=19,col="red", cex=.7)
text(tt$logFC[tt$q<.1], -log10(tt$q[tt$q<.1]), labels = datProbes$external_gene_name[tt$q<.1],cex=.6, pos = 3)
points(tt$logFC[idx.nfkbia], -log10(tt$q[idx.nfkbia]),pch=19,col="yellow", cex=1)
text(tt$logFC[idx.nfkbia], -log10(tt$q[idx.nfkbia]),pch=19,col="yellow", cex=1, label="Nfkbia", pos=1)
abline(h=-log10(.1), lty=2)
dev.off()
#MA-Plot
plot(tt$AveExpr, tt$logFC, xlab="Avg Expression", ylab="log2 fold change", main="MA Plot")
points(tt$AveExpr[tt$q<.1], tt$logFC[tt$q<.1],pch=19,col="red", cex=.7)
text(tt$AveExpr[tt$q<.1], tt$logFC[tt$q<.1], labels = datProbes$external_gene_name[tt$q<.05],cex=.8, pos = 3, col="red")
#Plot Top Individual Genes
gene_plot = list()
idx = c(which(tt$adj.P.Val<0.1), idx.nfkbia)
idx = idx[order(tt$adj.P.Val[idx])]
for(i in 1:length(idx)) {
gene = rownames(tt)[idx[i]]
d= data.frame(count=as.numeric(datExpr.voom_full$E[gene,]), Treatment=datMeta$Treatment, Region=datMeta$Region, Hemisphere=datMeta$Hemisphere, Subject=datMeta$Mouse, RIN = datMeta$RIN)
gene_plot[[i]] = ggplot(d,aes(x=Treatment, y=count, fill=Treatment))  +
geom_boxplot(outlier.shape = NA, aes(fill=Treatment)) + geom_point(position=position_jitterdodge(0.8), alpha=0.5,size=1) +
xlab("") + ylab("log2 normalized counts") + facet_grid(~Region) +
theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust=.5),
axis.text.x = element_blank(), axis.ticks.x =element_blank(),axis.title.x=element_blank(),
axis.title.y = element_text(size=7), axis.text.y = element_text(size=6),
legend.title = element_text(size=7), legend.text = element_text(size=6),
legend.key.width=unit(0.3,"cm"))+
ggtitle(datProbes$external_gene_name[match(gene,datProbes$ensembl_gene_id)],
subtitle = paste("log2FC=", signif(tt[gene, "logFC"],2), ", q=", signif(tt[gene, "q"],2),sep=""))
if(i!=1) {
gene_plot[[i]]=gene_plot[[i]] + theme(legend.position="none")
}
}
pdf(file="./figures//TSC_batch2_DGE.pdf", width=12,height=20)
grid.arrange(grobs=gene_plot[1:20], ncol=3)
grid.arrange(grobs=gene_plot[21:43], ncol=3)
dev.off()
tt.batch1 = read.csv("./tables/TSCpolyIC_sumStats.csv")
tt.batch1 = tt.batch1[match(rownames(tt), tt.batch1$ensembl_gene_id),]
cor.test(tt$logFC, tt.batch1$logFC)
#Calculate gene ontology for each region
plotGO = function(tt) {
go_results = data.frame()
tt$logFC=-1*tt$logFC
query.up = rownames(tt)[tt$adj.P.Val<.1 & tt$logFC>0]
query.up = query.up[order(tt[query.up, "logFC"], decreasing = T)]
query.down = rownames(tt)[tt$adj.P.Val<.1 & tt$logFC<0]
query.down = query.down[order(tt[query.down, "logFC"], decreasing = F)]
go.up = gprofiler(query.up, organism = "mmusculus", custom_bg = rownames(tt),
src_filter=c("KEGG"), correction_method = "fdr", ordered_query = F,
significant = T, exclude_iea = F,  region_query = F, max_p_value = 0.05,
numeric_ns = "", max_set_size = 1000,hier_filtering = "strong")
go.up = go.up[order(go.up$p.value)[1:min(10,nrow(go.up))],]
go.down = gprofiler(query.down,  organism = "mmusculus", custom_bg = rownames(tt),
src_filter=c("KEGG"), correction_method = "fdr", ordered_query = F,
significant = T, exclude_iea = F,  region_query = F, max_p_value = 0.05,
numeric_ns = "", max_set_size = 1000,hier_filtering = "strong")
go.down = go.down[order(go.down$p.value)[1:min(10,nrow(go.down))],]
go_results = data.frame()
go_results = rbind(go_results, data.frame(Change="Up", go.up))
go_results = rbind(go_results, data.frame( Change="Down", go.down))
go_results = go_results[order(-log10(go_results$p.value),decreasing = F),]
plot.down = ggplot(go_results[go_results$Change=="Down",],aes(x=reorder(term.name, -log10(p.value)), y=-log10(p.value))) + geom_bar(stat="identity") + coord_flip() +
xlab("") + geom_abline(slope = 0, intercept = -log10(.05), lty=2, lwd=.5) + theme(axis.text.y = element_text(size=8)) + ggtitle("Downregulated")
plot.up = ggplot(go_results[go_results$Change=="Up",],aes(x=reorder(term.name, -log10(p.value)), y=-log10(p.value))) + geom_bar(stat="identity", aes(x=reorder(term.name, -log10(p.value)))) + coord_flip() +
xlab("") + geom_abline(slope = 0, intercept = -log10(.05), lty=2, lwd=.5)+ theme(axis.text.y = element_text(size=8)) + ggtitle("Upregulated")
grid.arrange(grobs=list(plot.down, plot.up), ncol=2)
}
library(pathview)
dat = as.matrix(data.frame(Log2FC = as.numeric(tt$logFC), logP = -log10(tt$P.Value)))
rownames(dat) = rownames(tt.noWT)
pv.out =pathview(gene.data = dat[,c(1)], species = "mouse", pathway.id="04722", gene.idtype="ENSEMBL",same.layer=T,out.suffix="Neurotrophin")
pv.out =pathview(gene.data = dat[,2], species = "mouse", pathway.id="04722", gene.idtype="ENSEMBL",same.layer=T,out.suffix="Neurotrophin")
dat = as.matrix(data.frame(Log2FC = as.numeric(tt$logFC), logP = -log10(tt$P.Value) / (max(-log10(tt$P.Value)))))
rownames(dat) = rownames(tt.noWT)
pv.out =pathview(gene.data = dat[,2], species = "mouse", pathway.id="04722", gene.idtype="ENSEMBL",same.layer=T,out.suffix="Neurotrophin")
dat = as.matrix(data.frame(Log2FC = as.numeric(tt$logFC), logP = -log10(tt$P.Value) / (max(-log10(tt$P.Value)))))
dat$signedP = as.numeric(tt$adj.P.Val<0.1) * sign(-tt$logFC)
View(dat)
dat = as.matrix(data.frame(Log2FC = as.numeric(tt$logFC), logP = -log10(tt$P.Value) / (max(-log10(tt$P.Value)))))
View(dat)
dat[,3] = as.numeric(tt$adj.P.Val<0.1) * sign(-tt$logFC)
length(as.numeric(tt$adj.P.Val<0.1) * sign(-tt$logFC))
dim(dat)
dat = as.matrix(data.frame(Log2FC = as.numeric(tt$logFC), logP = -log10(tt$P.Value) / (max(-log10(tt$P.Value)))), signP = as.numeric(tt$adj.P.Val<0.1) * sign(-tt$logFC))
library(pathview)
dat = as.matrix(data.frame(Log2FC = as.numeric(tt$logFC), logP = -log10(tt$P.Value) / (max(-log10(tt$P.Value)))), signP = as.numeric(tt$adj.P.Val<0.1) * sign(-tt$logFC))
rownames(dat) = rownames(tt.noWT)
pv.out =pathview(gene.data = dat[,3], species = "mouse", pathway.id="04722", gene.idtype="ENSEMBL",same.layer=T,out.suffix="Neurotrophin")
View(dat)
dat = as.matrix(data.frame(Log2FC = as.numeric(tt$logFC), logP = -log10(tt$P.Value) / (max(-log10(tt$P.Value))), signP = as.numeric(tt$adj.P.Val<0.1) * sign(-tt$logFC)))
rownames(dat) = rownames(tt.noWT)
pv.out =pathview(gene.data = dat[,3], species = "mouse", pathway.id="04722", gene.idtype="ENSEMBL",same.layer=T,out.suffix="Neurotrophin")
View(dat)
pv.out =pathview(gene.data = dat[,3], species = "mouse", pathway.id="04062", gene.idtype="ENSEMBL",same.layer=T,out.suffix="Neurotrophin")
pv.out =pathview(gene.data = dat[,3], species = "mouse", pathway.id="04062", gene.idtype="ENSEMBL",same.layer=T,out.suffix="Chemokine")
pv.out =pathview(gene.data = dat[,3], species = "mouse", pathway.id="04722", gene.idtype="ENSEMBL",same.layer=T,out.suffix="Neuotrophine")
pv.out =pathview(gene.data = dat[,3], species = "mouse", pathway.id="04010", gene.idtype="ENSEMBL",same.layer=T,out.suffix="Map Kinase")
pv.out =pathview(gene.data = dat[,3], species = "mouse", pathway.id="04014", gene.idtype="ENSEMBL",same.layer=T,out.suffix="RAS Signaling")
pv.out =pathview(gene.data = dat[,3], species = "mouse", pathway.id="04064", gene.idtype="ENSEMBL",same.layer=T,out.suffix="NFKB")
pv.out =pathview(gene.data = dat[,3], species = "mouse", pathway.id="02580", gene.idtype="ENSEMBL",same.layer=T,out.suffix="PI3K")
pv.out =pathview(gene.data = dat[,3], species = "mouse", pathway.id="04080", gene.idtype="ENSEMBL",same.layer=T,out.suffix="NeuroLigand")
query.up = rownames(tt)[tt.noWT$adj.P.Val<-.1 & tt.noWT$logFC>0]
go.up = gprofiler(query.up, organism = "mmusculus", custom_bg = rownames(tt),
src_filter=c("KEGG"), correction_method = "fdr", ordered_query = F,
significant = T, exclude_iea = F,  region_query = F, max_p_value = 0.05,
numeric_ns = "", max_set_size = 1000,hier_filtering = "strong")
View(go.up)
query.up = rownames(tt)[tt.noWT$adj.P.Val< .1 & tt.noWT$logFC<0]
table(tt.noWT$adj.P.Val<0.1)
table(tt.noWT$adj.P.Val<0.01)
table(tt.noWT$adj.P.Val<0.001)
tt.noWT = topTable(lm.noWT, coef=2, number = Inf,sort.by = "none",genelist = datProbes$external_gene_name)
table(tt.noWT$adj.P.Val<0.1)
query.up = rownames(tt)[tt.noWT$adj.P.Val< .1 & tt.noWT$logFC<0]
go.up = gprofiler(query.up, organism = "mmusculus", custom_bg = rownames(tt),
src_filter=c("KEGG"), correction_method = "fdr", ordered_query = F,
significant = T, exclude_iea = F,  region_query = F, max_p_value = 0.05,
numeric_ns = "", max_set_size = 1000,hier_filtering = "strong")
View(go.up)
go.up = gprofiler(query.up, organism = "mmusculus", custom_bg = rownames(tt),
src_filter=c("KEGG","GO"), correction_method = "fdr", ordered_query = F,
significant = T, exclude_iea = F,  region_query = F, max_p_value = 0.05,
numeric_ns = "", max_set_size = 1000,hier_filtering = "strong")
View(go.up)
go.up
go.up[1.]
go.up[1,]
plotGene("DRD2", datExpr.voom.noWT, datMeta.noWT,tt.noWT)
plotGene("DRD2", datExpr.voom.noWT$E, datMeta.noWT,tt.noWT)
dim(datExpr.voom.noWT$E)
dim(datMeta.noWT)
dim(tt.noWT)
plotGene("DRD2", datExpr.voom.noWT$E, datMeta.noWT,tt.noWT)
datMeta.noWT$Group2
idx
plotGene("Drd2", datExpr.voom.noWT$E, datMeta.noWT,tt.noWT)
plotGene("Cd180", datExpr.voom.noWT$E, datMeta.noWT,tt.noWT)
plotGene("Zc3hav1", datExpr.voom.noWT$E, datMeta.noWT,tt.noWT)
plotGene("Hist1h2be", datExpr.voom.noWT$E, datMeta.noWT,tt.noWT)
plotGene("Hmgb2", datExpr.voom.noWT$E, datMeta.noWT,tt.noWT)
plotGene("Ifit3b", datExpr.voom.noWT$E, datMeta.noWT,tt.noWT)
plotGene("Gm4951", datExpr.voom.noWT$E, datMeta.noWT,tt.noWT)
plotGene("Gbp4", datExpr.voom.noWT$E, datMeta.noWT,tt.noWT)
go.up
go.up[26,]
plotGene("P2ry12", datExpr.voom.noWT$E, datMeta.noWT,tt.noWT)
plotGene("P2ry13", datExpr.voom.noWT$E, datMeta.noWT,tt.noWT)
plotGene("Gpr34", datExpr.voom.noWT$E, datMeta.noWT,tt.noWT)
tt
plotGene = function(gene, datExpr, datMeta, tt) {
idx = which(datProbes$external_gene_name==gene)
d= data.frame(count=as.numeric(datExpr[idx,]), Group = datMeta$Group2,Treatment=datMeta$Treatment, Region=datMeta$Region, Hemisphere=datMeta$Hemisphere, Subject=datMeta$Subject, RIN = datMeta$RIN)
tt$q = tt$adj.P.Val
g1 = ggplot(d,aes(x=Group, y=count, fill=Group))  +
geom_boxplot(outlier.shape = NA, aes(fill=Group)) + geom_point(position=position_jitterdodge(0.8), alpha=0.5,size=1) +
xlab("") + ylab("log2 normalized counts") + facet_grid(~Region) +
theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust=.5),
axis.text.x = element_blank(), axis.ticks.x =element_blank(),axis.title.x=element_blank(),
axis.title.y = element_text(size=8), axis.text.y = element_text(size=8),
legend.title = element_text(size=8), legend.text = element_text(size=8),
legend.key.width=unit(0.3,"cm"))+
ggtitle(datProbes$external_gene_name[idx],
subtitle = paste("DGE social memory: log2FC=", signif(-1*tt[idx, "logFC"],2), ", q=", signif(tt[idx, "q"],2),sep=""))
return(list(g1, pairwise.t.test(d$count,d$Region:d$Group,p.adjust.method = "none")))
}
plotGene("Nfkbia", datExpr.voom$E, datMeta,tt)
plotGene("Csfr1", datExpr.voom$E, datMeta,tt)
plotGene("Csf1r", datExpr.voom$E, datMeta,tt)
plotGene("Aif1", datExpr.voom$E, datMeta,tt)
plotGene("Hla-dra", datExpr.voom$E, datMeta,tt)
plotGene("Tyrobp", datExpr.voom$E, datMeta,tt)
glXYPlot(-tt.noWT$logFC, -log10(tt.noWT$adj.P.Val), status=as.numeric(tt.noWT$adj.P.Val<0.1),
counts=datExpr.ComBat, anno=datProbes[,c(1:3)], groups=datMeta$Group2,
side.main = "external_gene_name",  xlab = "logFC",ylab = "log10FDR", sample.cols = labels2colors(as.numeric(datMeta$Region)))
library(Glimma)
glXYPlot(-tt.noWT$logFC, -log10(tt.noWT$adj.P.Val), status=as.numeric(tt.noWT$adj.P.Val<0.1),
counts=datExpr.ComBat, anno=datProbes[,c(1:3)], groups=datMeta$Group2,
side.main = "external_gene_name",  xlab = "logFC",ylab = "log10FDR", sample.cols = labels2colors(as.numeric(datMeta$Region)))
glXYPlot(-tt.noWT$logFC, -log10(tt.noWT$adj.P.Val), status=as.numeric(tt.noWT$adj.P.Val<0.1),
counts=datExpr.voom$E, anno=datProbes[,c(1:3)], groups=datMeta$Group2,
side.main = "external_gene_name",  xlab = "logFC",ylab = "log10FDR", sample.cols = labels2colors(as.numeric(datMeta$Region)))
glXYPlot(-tt.noWT$logFC, -log10(tt.noWT$adj.P.Val), status=as.numeric(tt.noWT$adj.P.Val<0.1),
counts=datExpr.voom.noWT$E, anno=datProbes[,c(1:3)], groups=datMeta$Group2,
side.main = "external_gene_name",  xlab = "logFC",ylab = "log10FDR", sample.cols = labels2colors(as.numeric(datMeta$Region)))
glXYPlot(-tt.noWT$logFC, -log10(tt.noWT$adj.P.Val), status=as.numeric(tt.noWT$adj.P.Val<0.1),
counts=datExpr.voom.noWT$E, anno=datProbes[,c(1:3)], groups=datMeta.noWT$Group2,
side.main = "external_gene_name",  xlab = "logFC",ylab = "log10FDR", sample.cols = labels2colors(as.numeric(datMeta.noWT$Region)))
